// SPDX-License-Identifier: MIT
pragma solidity 0.8.20;

import {Test} from "forge-std/Test.sol";
import {StdInvariant} from "forge-std/StdInvariant.sol";
import {FuzzCantCatch} from "../../src/invariant-break/fuzz-cant-catch/FuzzCantCatch.sol";

contract FuzzCantCatchTest is StdInvariant, Test {
    FuzzCantCatch fuzzCantCatch;

    function setUp() public {
        fuzzCantCatch = new FuzzCantCatch();
    }

    // Invariant / Stateful fuzzing won't work either because their is only 1 function to call!
    function testCatchBugWithFuzz(uint128 randomNumber) public view {
        uint256 response = fuzzCantCatch.hellFunc(randomNumber);
        assert(response >= 0);
    }

    // But symbolic execution does catch it!!!
    // halmos --function check_hellFunc_doesntRevert
    function check_hellFunc_doesntRevert(uint128 num) public view {
        // perform low level call
        (bool success,) =
            address(fuzzCantCatch).staticcall(abi.encodeWithSelector(fuzzCantCatch.hellFunc.selector, num));
        assert(success);
    }
    // You should see the following output
    //     [FAIL] check_hellFunc_doesntRevert(uint128) (paths: 10/18, time: 3.05s, bounds: [])
    // Counterexample:
    //     p_num_uint128 = 0x0000000000000000000000000000000000000000000000000000000000000063 (99)
}
