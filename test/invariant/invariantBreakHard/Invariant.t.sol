// SPDX-License-Identifier: MIT
pragma solidity 0.8.20;

import {Test} from "forge-std/Test.sol";
import {StdInvariant} from "forge-std/StdInvariant.sol";
import {InvariantBreakHard} from "../../../src/invariant-break/InvariantBreakHard.sol";
import {YeildERC20} from "../../mocks/YeildERC20.sol";
import {MockUSDC} from "../../mocks/MockUSDC.sol";
import {IERC20} from "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import {Handler} from "./Handler.t.sol";

contract InvariantBreakHardTest is StdInvariant, Test {
    InvariantBreakHard invariantBreakHard;
    YeildERC20 yeildERC20;
    MockUSDC mockUSDC;
    IERC20[] public supportedTokens;
    uint256 public startingAmount;

    address owner = makeAddr("owner");

    Handler handler;

    function setUp() public {
        vm.startPrank(owner);
        // Give our owner 1M tokens each
        yeildERC20 = new YeildERC20();
        startingAmount = yeildERC20.INITIAL_SUPPLY();
        mockUSDC = new MockUSDC();
        mockUSDC.mint(owner, startingAmount);

        supportedTokens.push(mockUSDC);
        supportedTokens.push(yeildERC20);
        invariantBreakHard = new InvariantBreakHard(supportedTokens);
        vm.stopPrank();

        handler = new Handler(invariantBreakHard, yeildERC20, mockUSDC);
        targetContract(address(handler));
    }

    // // THIS however, catches our bug!!!
    // function invariant_testInvariantBreak() public {
    //     vm.startPrank(owner);
    //     invariantBreakHard.withdrawToken(mockUSDC);
    //     invariantBreakHard.withdrawToken(yeildERC20);
    //     vm.stopPrank();

    //     assert(mockUSDC.balanceOf(address(invariantBreakHard)) == 0);
    //     assert(yeildERC20.balanceOf(address(invariantBreakHard)) == 0);
    //     assert(mockUSDC.balanceOf(owner) == startingAmount);
    //     assert(yeildERC20.balanceOf(owner) == startingAmount);
    // }
}
